syntax = "proto3";

package proto;

option java_package = "com.hederahashgraph.api.proto.java";
option java_multiple_files = true;

enum ResponseCodeEnum {

  OK = 0; // The transaction passed the precheck validations.
  INVALID_TRANSACTION = 1; // For any error not handled by specific error codes listed below.
  PAYER_ACCOUNT_NOT_FOUND = 2; //Payer account does not exist.
  INVALID_NODE_ACCOUNT = 3; //Node Account provided does not match the node account of the node the transaction was submitted to.
  TRANSACTION_EXPIRED = 4; // Pre-Check error when TransactionValidStart + transactionValidDuration is less than current consensus time.
  INVALID_TRANSACTION_START = 5; // Transaction start time is greater than current consensus time
  INVALID_TRANSACTION_DURATION = 6; //valid transaction duration is a positive non zero number that does not exceed 120 seconds
  INVALID_SIGNATURE = 7; // The transaction signature is not valid
  MEMO_TOO_LONG = 8; //Transaction memo size exceeded 100 bytes
  INSUFFICIENT_TX_FEE = 9; // The fee provided in the transaction is insufficient for this type of transaction
  INSUFFICIENT_PAYER_BALANCE = 10; // The payer account has insufficient cryptocurrency to pay the transaction fee
  DUPLICATE_TRANSACTION = 11; // This transaction ID is a duplicate of one that was submitted to this node or reached consensus in the last 180 seconds (receipt period)
  BUSY = 12; //If API is throttled out
  NOT_SUPPORTED = 13; //The API is not currently supported


  INVALID_FILE_ID = 14; //The file id is invalid or does not exist
  INVALID_ACCOUNT_ID = 15; //The account id is invalid or does not exist
  INVALID_CONTRACT_ID = 16; //The contract id is invalid or does not exist
  INVALID_TRANSACTION_ID = 17; //Transaction id is not valid
  RECEIPT_NOT_FOUND = 18; //Receipt for given transaction id does not exist
  RECORD_NOT_FOUND = 19; //Record for given transaction id does not exist
  INVALID_SOLIDITY_ID = 20; //The solidity id is invalid or entity with this solidity id does not exist


  UNKNOWN = 21; // Transaction hasn't yet reached consensus, or has already expired
  SUCCESS = 22; // The transaction succeeded
  FAIL_INVALID = 23; // There was a system error and the transaction failed because of invalid request parameters.
  FAIL_FEE = 24; // There was a system error while performing fee calculation, reserved for future.
  FAIL_BALANCE = 25; // There was a system error while performing balance checks, reserved for future.


  KEY_REQUIRED = 26; //Key not provided in the transaction body
  BAD_ENCODING = 27; //Unsupported algorithm/encoding used for keys in the transaction
  INSUFFICIENT_ACCOUNT_BALANCE = 28; //When the account balance is not sufficient for the transfer
  INVALID_SOLIDITY_ADDRESS = 29; //During an update transaction when the system is not able to find the Users Solidity address


  INSUFFICIENT_GAS = 30; //Not enough gas was supplied to execute transaction
  CONTRACT_SIZE_LIMIT_EXCEEDED = 31; //contract byte code size is over the limit
  LOCAL_CALL_MODIFICATION_EXCEPTION = 32; //local execution (query) is requested for a function which changes state
  CONTRACT_REVERT_EXECUTED = 33; //Contract REVERT OPCODE executed
  CONTRACT_EXECUTION_EXCEPTION = 34; //For any contract execution related error not handled by specific error codes listed above.
  INVALID_RECEIVING_NODE_ACCOUNT = 35; //In Query validation, account with +ve(amount) value should be Receiving node account, the receiver account should be only one account in the list
  MISSING_QUERY_HEADER = 36; // Header is missing in Query request


  ACCOUNT_UPDATE_FAILED = 37; // The update of the account failed
  INVALID_KEY_ENCODING = 38; // Provided key encoding was not supported by the system
  NULL_SOLIDITY_ADDRESS = 39; // null solidity address

  CONTRACT_UPDATE_FAILED = 40; // update of the contract failed
  INVALID_QUERY_HEADER = 41; // the query header is invalid

  INVALID_FEE_SUBMITTED = 42; // Invalid fee submitted
  INVALID_PAYER_SIGNATURE = 43; // Payer signature is invalid


  KEY_NOT_PROVIDED = 44; // The keys were not provided in the request.
  INVALID_EXPIRATION_TIME = 45; // Expiration time provided in the transaction was invalid.
  NO_WACL_KEY = 46; //WriteAccess Control Keys are not provided for the file
  FILE_CONTENT_EMPTY = 47; //The contents of file are provided as empty.
  INVALID_ACCOUNT_AMOUNTS = 48; // The crypto transfer credit and debit do not sum equal to 0
  EMPTY_TRANSACTION_BODY = 49; // Transaction body provided is empty
  INVALID_TRANSACTION_BODY = 50; // Invalid transaction body provided


  INVALID_SIGNATURE_TYPE_MISMATCHING_KEY = 51; // the type of key (base ed25519 key, KeyList, or ThresholdKey) does not match the type of signature (base ed25519 signature, SignatureList, or ThresholdKeySignature)
  INVALID_SIGNATURE_COUNT_MISMATCHING_KEY = 52; // the number of key (KeyList, or ThresholdKey) does not match that of signature (SignatureList, or ThresholdKeySignature). e.g. if a keyList has 3 base keys, then the corresponding signatureList should also have 3 base signatures.

  EMPTY_CLAIM_BODY = 53; // the claim body is empty
  EMPTY_CLAIM_HASH = 54; //the hash for the claim is empty
  EMPTY_CLAIM_KEYS = 55; // the key list is empty
  INVALID_CLAIM_HASH_SIZE = 56; // the size of the claim hash is not 48 bytes

  EMPTY_QUERY_BODY = 57; // the query body is empty
  EMPTY_CLAIM_QUERY = 58; // the crypto claim query is empty
  CLAIM_NOT_FOUND = 59; // the crypto claim doesn't exists in the file system. It expired or was never persisted.
  ACCOUNT_ID_DOES_NOT_EXIST = 60; // the account id passed has not yet been created.
  CLAIM_ALREADY_EXISTS = 61; // the claim hash already exists


  INVALID_FILE_WACL = 62; // File WACL keys are invalid
  SERIALIZATION_FAILED = 63; // Serialization failure
  TRANSACTION_OVERSIZE = 64; // The size of the Transaction is greater than transactionMaxBytes
  TRANSACTION_TOO_MANY_LAYERS = 65; // The Transaction has more than 50 levels
  CONTRACT_DELETED = 66; //Contract is marked as deleted

  PLATFORM_NOT_ACTIVE = 67; // the platform node is either disconnected or lagging behind.
  KEY_PREFIX_MISMATCH = 68; // one public key matches more than one prefixes on the signature map
  PLATFORM_TRANSACTION_NOT_CREATED = 69; // transaction not created by platform due to either large backlog or message size exceeded transactionMaxBytes
  INVALID_RENEWAL_PERIOD = 70; // auto renewal period is not a positive number of seconds
  INVALID_PAYER_ACCOUNT_ID = 71; // the response code when a smart contract id is passed for a crypto API request
  ACCOUNT_REPEATED_IN_ACCOUNT_AMOUNTS = 72; // do not allow accounts to repeat in the transfer account list
}